{"componentChunkName":"component---node-modules-etclabscore-gatsby-theme-pristine-src-templates-default-tsx","path":"/tutorial","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Carti Tutorial Guide | A tour through Carti\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Summary\"), mdx(\"p\", null, \"In this tutorial we will walk you through building a cartesi machine that you publish from scratch. We'll also show what it looks for a user\\nto download the machine and run it. This mirrors a bit \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.cartesi.io/en/docs/tutorials/calculator/cartesi-machine/\"\n  }), \"https://www.cartesi.io/en/docs/tutorials/calculator/cartesi-machine/\"), \".\\nFor full details on the why and interworkings of Cartesi the tutorial linked above, is immensely helpful. This will focus on using Carti.\"), mdx(\"h2\", null, \"Requirements\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#Carti\\nnpm install -g @createdreamtech/carti\\n# Probably docker if you want to run the end results\\n\")), mdx(\"h2\", null, \"Create a project repo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"git clone git@github.com:createdreamtech/carti-sample.git\\ncd carti-sample\\n\")), mdx(\"h2\", null, \"Setup defaults if you haven't already\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"carti machine install --global https://raw.githubusercontent.com/createdreamtech/carti-default/main/carti-machine-package.json --nobundle --nobuild\\ncarti machine init\\ncat carti-machine-package.json\\n\")), mdx(\"h2\", null, \"Create some custom drives\"), mdx(\"p\", null, \"Here we will be creating a custom flash drive, that will house a calculation\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# Pop into docker so we produce these under a consistent environment\\ndocker run -e USER=$(id -u -n) -e UID=$(id -u) -e GID=$(id -g) -e GROUP=$(id -g -n) \\\\\\n-v $(pwd):/opt/carti -it cartesi/playground /bin/bash\\n# Our future input flash drive\\necho \\\"2^71 + 36^12\\\" > input.raw\\n# size it up to be on a 4K size interval as required by the cartesi machines\\ntruncate -s 4K input.raw\\ntruncate -s 4K output.raw\\n\")), mdx(\"h2\", null, \"Let's start adding drives to our machine\"), mdx(\"p\", null, \"The first thing we need to do once we have the drive is bundle it so we can use it as well as other people \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"carti bundle -t flashdrive -n calculator-input -v 0.0.1 -d \\\"calculator input\\\" ./input.raw\\n# outputs bundled: calculator-input as baenrwigmw66wmp2vwjejrmmlw5sbvwpsx3zjtnd7rep4oo6wd3glahtfl4\\ncarti bundle -t flashdrive -n calculator-output -v 0.0.1 -d \\\"calculator output\\\" ./output.raw \\n# outputs bundled: calculator-output as baenrwia5pfe7b6dvoys33k7umgsbbixgpympwcfjpqowpaye3bghmrs24m\\n\")), mdx(\"p\", null, \"The result should look like\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \".\\n\\u251C\\u2500\\u2500 LICENSE\\n\\u251C\\u2500\\u2500 README.md\\n\\u251C\\u2500\\u2500 carti-machine-package.json\\n\\u251C\\u2500\\u2500 carti_bundles\\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 baenrwia5pfe7b6dvoys33k7umgsbbixgpympwcfjpqowpaye3bghmrs24m\\n\\u2502\\xA0\\xA0 \\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 carti-meta.json\\n\\u2502\\xA0\\xA0 \\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 output.raw\\n\\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 baenrwigmw66wmp2vwjejrmmlw5sbvwpsx3zjtnd7rep4oo6wd3glahtfl4\\n\\u2502\\xA0\\xA0     \\u251C\\u2500\\u2500 carti-meta.json\\n\\u2502\\xA0\\xA0     \\u2514\\u2500\\u2500 input.raw\\n\\u251C\\u2500\\u2500 input.raw\\n\\u2514\\u2500\\u2500 output.raw\\n\")), mdx(\"p\", null, \"We created a carti_bundles/ directory this functions as a local store for any data that you've bundle up\\nThe recommendation is that carti_bundles/ not be uploaded to git.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"echo \\\"carti_bundles/\\\" >> .gitignore\\n\")), mdx(\"p\", null, \"What do we have installed?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"carti list\\n\")), mdx(\"p\", null, \"We have the following bundles installed:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"@flashdrive/calculator-input:0.0.1:baenrwigmw66wmp2vwjejrmmlw5sbvwpsx3zjtnd7rep4oo6wd3glahtfl4:local\\n@flashdrive/calculator-output:0.0.1:baenrwia5pfe7b6dvoys33k7umgsbbixgpympwcfjpqowpaye3bghmrs24m:local\\n@rom/default-rom:v0.4.0:baenrwigwdfweve3apyvwicc2zpmzz6vdhsg62xnmzhauruw6ud4dbbafuq:global\\n@ram/default-ram:v0.7.0:baenrwia5vqqvdu5chzjqq57tfo45z2txorpnmljeiuwemcibba43noqpvu:global\\n@flash/default-root:v0.6.0:baenrwig2hfjzzeqmozb7sws6tyxmyazvuipjp5hxamtllifsokwh73eucy:global\\n\")), mdx(\"h3\", null, \"Let's make these bundles accessible\"), mdx(\"p\", null, \"There are many ways to make a bundle accessible, disk, s3, or other\\nWe're going to use other, because it's just a flexible way for us to link data. so let's use github\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"carti publish uri calculator-input https://github.com/createdreamtech/carti-sample/blob/feat/complete/input.raw\\ncarti publish uri calculator-output https://github.com/createdreamtech/carti-sample/blob/feat/complete/output.raw\\ncat bundles.json\\n\")), mdx(\"h3\", null, \"What's package listing file aka. bundles.json ...\"), mdx(\"p\", null, \"So bundles.json provides a way for listing drives and assets that you know about, they can be local to you or not, they are simply\\nbundle metadata that allows a user to download the assets associated with the content-addressed ids.\\nCurrently we restrict package listing to git based endpoints, so users can add the listing files and discover packages. Think\\nnpm regsitry but distributed across participants.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"git add bundles.json \\ngit commit -m \\\"feat: add listing file to public repo\\\"\\ngit push origin main\\n\")), mdx(\"h3\", null, \"Now let's add these drives to a machine!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"carti machine add flash --share -m output calculator-output\\ncarti machine add flash -m input calculator-input\\ncat carti-machine-package.json\\n\")), mdx(\"p\", null, \"You should see this in flash drive entry\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"    \\\"flash_drive\\\": [\\n      {\\n        \\\"cid\\\": \\\"baenrwig2hfjzzeqmozb7sws6tyxmyazvuipjp5hxamtllifsokwh73eucy\\\",\\n        \\\"start\\\": \\\"0x8000000000000000\\\",\\n        \\\"label\\\": \\\"root\\\",\\n        \\\"length\\\": \\\"0x3c00000\\\",\\n        \\\"shared\\\": false\\n      },\\n      {\\n        \\\"cid\\\": \\\"baenrwigmw66wmp2vwjejrmmlw5sbvwpsx3zjtnd7rep4oo6wd3glahtfl4\\\",\\n        \\\"start\\\": \\\"0x9000000000000000\\\",\\n        \\\"label\\\": \\\"input\\\",\\n        \\\"length\\\": \\\"0x1000\\\",\\n        \\\"shared\\\": false\\n      },\\n      {\\n        \\\"cid\\\": \\\"baenrwia5pfe7b6dvoys33k7umgsbbixgpympwcfjpqowpaye3bghmrs24m\\\",\\n        \\\"start\\\": \\\"0xa000000000000000\\\",\\n        \\\"label\\\": \\\"output\\\",\\n        \\\"length\\\": \\\"0x1000\\\",\\n        \\\"shared\\\": false\\n      }\\n    ],\\n\")), mdx(\"h3\", null, \"It's a complete spec: carti-machine-package.json\"), mdx(\"p\", null, \"The machine package.json is a superset of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/createdreamtech/carti-core/blob/main/src/machine-config-package-schema.json\"\n  }), \"features\"), \" supported by a lua \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.cartesi.io/en/docs/machine/host/lua/\"\n  }), \"cartesi machine configuration\")), mdx(\"p\", null, \"When we add drives we are creating a shareable superset of a lua config for running machines.\\ncid's link back to bundles, which are assumed to be stored either locally or globally in carti_bundles/.\"), mdx(\"h3\", null, \"Let's create a build dir of all the deps by installing the machine we have so far\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"carti machine install ./carti-machine-package.json\\n\")), mdx(\"p\", null, \"With install we have created a carti_build/ directory that will serve as mountable or clear demarcation of bundles/drives that are required to run the machine\"), mdx(\"h3\", null, \"Let's add a boot command\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"carti machine add boot \\\"dd status=none if=\\\\$(flashdrive input) | lua -e 'print((string.unpack(\\\\\\\\\\\\\\\"z\\\\\\\\\\\\\\\", io.read(\\\\\\\\\\\\\\\"a\\\\\\\\\\\\\\\"))))' | bc | dd status=none of=\\\\$(flashdrive output)\\\"\\n\")), mdx(\"h3\", null, \"Build a new cartesi machine config w/ the updates\"), mdx(\"p\", null, \"The following will generate a cartesi machine configuration file as well as easy to use runscript that will allow you to run and store the machine\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"carti machine build --runscript\\ncat machine-config.lua\\n\")), mdx(\"h3\", null, \"Run the machine\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"docker run -e USER=$(id -u -n) -e UID=$(id -u) -e GID=$(id -g) -e GROUP=$(id -g -n) \\\\\\n-v $(pwd):/opt/carti -v $(pwd)/carti_build/bundles:/opt/carti/packages -it cartesi/playground /bin/bash\\ncd /opt/carti; luapp5.3 run-config.lua machine-config\\n\")), mdx(\"h3\", null, \"Check the results\"), mdx(\"p\", null, \"Because our configuration mounts the carti_build directory as the directory for all our drives and stuff, we can see the results\\nof the data output to our output drive via\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"cat carti_build/bundles/baenrwia5pfe7b6dvoys33k7umgsbbixgpympwcfjpqowpaye3bghmrs24m/output.raw\\n\")), mdx(\"h3\", null, \"Let's prep for release\"), mdx(\"p\", null, \"Here we list all the external repo dependencies we might have with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"machine repo list\"), \" then we just simply add our\\nown repo to the list and call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"carti machine repo add\"), \" to make an entry\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"carti machine repo add $(echo \\\"https://github.com/createdreamtech/carti-sample/tree/feat/complete,$(carti machine repo list)\\\"\\n\")), mdx(\"h3\", null, \"If we're happy and we think it's good let's release the machine and bundles info\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"echo \\\"carti_build\\\" >> .gitignore\\necho \\\"machine-config.lua\\\" >> .gitignore\\necho \\\"run-config.lua\\\" >> .gitignore\\ngit add bundles.json \\ngit add carti-machine-package.json \\ngit push origin main \\n\")), mdx(\"h3\", null, \"Let's try and do a one shot install and run\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"cd ..\\nmkdir test-project\\ncd test-project\\ncarti machine install https://github.com/createdreamtech/carti-sample/tree/feat/complete --save\\n# the save command will save the carti-machine-package.json that was fetched \\n# so you can then create runscripts etc... with that context. \\n# It will overwrite existing carti-machine-package.json .\\n\")), mdx(\"h3\", null, \"That about wraps it up\"), mdx(\"p\", null, \"The next step would to see about the larger concepts and details.\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs\"\n  }), \"Concepts\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Summary In this tutorial we will walk you through building a cartesi machine that you publish from scratch. We'll also show what it looks…","fields":{"slug":"/tutorial"},"frontmatter":{"title":"Carti Tutorial Guide | A tour through Carti"}}},"pageContext":{"slug":"/tutorial","prev":{"name":"Use","link":"/getting-started#commands","ignoreNextPrev":null},"next":{"name":"Docs","link":"/docs","ignoreNextPrev":null}}},"staticQueryHashes":["1291771538","300313841","4275213719"]}