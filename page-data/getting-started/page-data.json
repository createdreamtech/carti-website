{"componentChunkName":"component---node-modules-etclabscore-gatsby-theme-pristine-src-templates-default-tsx","path":"/getting-started","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Carti Getting Started Guide | A guide through Carti\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Getting Started\"), mdx(\"p\", null, \"In this guide we'll go over installation and basic usage to get going.\"), mdx(\"h3\", null, \"Requirements\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"nodejs v15.x.x or greater\\n# I recommend using nvm\\n# https://github.com/nvm-sh/nvm\\n# example usage: nvm use v15.0.1 \\n# Suggestion to run the entire tutorial install docker\\n\")), mdx(\"h3\", null, \"Installation\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"npm install -g @createdreamtech/carti \\ncarti --help\\ncarti version \\n\")), mdx(\"h3\", null, \"Add the default machine data\"), mdx(\"p\", null, \"Here we will add the default bundles to our global store, this will allow us to create\\npackages from a default base, without downloading the requirements each time.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"carti machine install -g --nobundle --nobuild \\\\\\nhttps://raw.githubusercontent.com/createdreamtech/carti-default/main/carti-machine-package.json \\n\")), mdx(\"h3\", null, \"Create a default machine\"), mdx(\"p\", null, \"Here will use the default packages to create a cartesi machine\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"mkdir carti-example\\ncd carti-example\\ncarti machine init\\ncat carti-machine-package.json\\n\")), mdx(\"h3\", null, \"Install a cartesi machine config\"), mdx(\"p\", null, \"Since we aren't adding new packages we can just build the machine without installing missing bundles\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"carti machine install carti-machine-package.json\\n\")), mdx(\"p\", null, \"Your directory should look like this\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \".\\n\\u251C\\u2500\\u2500 carti-machine-package.json\\n\\u251C\\u2500\\u2500 carti_build\\n\\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 bundles\\n\\u2502\\xA0\\xA0     \\u251C\\u2500\\u2500 baenrwia5vqqvdu5chzjqq57tfo45z2txorpnmljeiuwemcibba43noqpvu\\n\\u2502\\xA0\\xA0     \\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 carti-meta.json\\n\\u2502\\xA0\\xA0     \\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 linux-5.5.19-ctsi-2.bin\\n\\u2502\\xA0\\xA0     \\u251C\\u2500\\u2500 baenrwig2hfjzzeqmozb7sws6tyxmyazvuipjp5hxamtllifsokwh73eucy\\n\\u2502\\xA0\\xA0     \\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 carti-meta.json\\n\\u2502\\xA0\\xA0     \\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 rootfs.ext2\\n\\u2502\\xA0\\xA0     \\u2514\\u2500\\u2500 baenrwigwdfweve3apyvwicc2zpmzz6vdhsg62xnmzhauruw6ud4dbbafuq\\n\\u2502\\xA0\\xA0         \\u251C\\u2500\\u2500 carti-meta.json\\n\\u2502\\xA0\\xA0         \\u2514\\u2500\\u2500 rom.bin\\n\\u2514\\u2500\\u2500 machine-config.lua\\n\")), mdx(\"p\", null, \"This outputs by default a mountable build directory that contains all the bundles related to your machine\"), mdx(\"h3\", null, \"Create a runscript so we can test the machine\"), mdx(\"p\", null, \"machine build - allows us to determine what the machine config looks like\\ninternally we map to a virtual directory so we can use this in any context we want\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"cat carti-machine-package.json\\n\\nreturn {\\n    ram = {\\n      length = 0x4000000,\\n      image_filename = \\\"/opt/carti/packages/baenrwia5vqqvdu5chzjqq57tfo45z2txorpnmljeiuwemcibba43noqpvu/linux-5.5.19-ctsi-2.bin\\\",\\n    },\\n    rom = {\\n      image_filename = \\\"/opt/carti/packages/baenrwigwdfweve3apyvwicc2zpmzz6vdhsg62xnmzhauruw6ud4dbbafuq/rom.bin\\\",\\n       bootargs = \\\"console=hvc0 rootfstype=ext2 root=/dev/mtdblock0 rw quiet mtdparts=flash.0:-(root) -- ls\\\",\\n    },\\n    flash_drive = {\\n      {\\n        start = 0x8000000000000000,\\n        length = 0x3c00000,\\n        image_filename = \\\"/opt/carti/packages/baenrwig2hfjzzeqmozb7sws6tyxmyazvuipjp5hxamtllifsokwh73eucy/rootfs.ext2\\\",\\n        shared = false,\\n      },\\n    },\\n  }\\n\\n\")), mdx(\"p\", null, \"Note how image_filename points to /opt/carti/packages this can be changed using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"carti machine build --dir /some/path\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"carti machine build --norunscript\\n\")), mdx(\"h3\", null, \"Run the machine with the playground\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"carti docker\\n\")), mdx(\"p\", null, \"Outputs some hints on how to run machine . Try the following if you have docker and the playground\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"docker run -e USER=$(id -u -n) -e UID=$(id -u)  -e GID=$(id -g) -e GROUP=$(id -g -n) \\\\\\n-v$(pwd):/opt/carti -v $(pwd)/carti_build/bundles:/opt/carti/packages \\\\\\n-it cartesi/playground /bin/bash\\n\\ncd /opt/carti; luapp5.3 run-config.lua machine-config\\n\")), mdx(\"p\", null, \"When you run the run script it also by default creates a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.cartesi.io/en/docs/machine/host/lua/#instantiation-from-persistent-state\"\n  }), \"stored machine\"), \". That machine is generated as cartesi-machine folder in the cwd. \"), mdx(\"h3\", null, \"Change the boot args to echo Hello World\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"carti machine add boot \\\"echo 'Hello World'\\\"\\n\")), mdx(\"h3\", null, \"See the changes\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"rm -rf cartesi-machine/\\n\\ndocker run -e USER=$(id -u -n) -e UID=$(id -u)  -e GID=$(id -g) -e GROUP=$(id -g -n) \\\\\\n-v$(pwd):/opt/carti -v $(pwd)/carti_build/bundles:/opt/carti/packages \\\\\\n-it cartesi/playground /bin/bash\\n\\ncd /opt/carti; luapp5.3 run-config.lua machine-config\\n\")), mdx(\"h3\", null, \"That's it!\"), mdx(\"p\", null, \"I'd recommend checking out the tutorial to do some more intricate things,\\nsuch as create your own bundle, a bundless flashdrive, and publish a machine\"), mdx(\"h2\", null, \"Next Steps\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Take the Tutorial \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/tutorial\"\n  }), \"/tutorial\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Read the main concepts \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/docs#concepts\"\n  }), \"/concepts\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Deep dive into the code \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/createdreamtech/carti\"\n  }), \"github.com/createdreamtech/carti\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Getting Started In this guide we'll go over installation and basic usage to get going. Requirements Installation Add the default machineâ€¦","fields":{"slug":"/getting-started"},"frontmatter":{"title":"Carti Getting Started Guide | A guide through Carti"}}},"pageContext":{"slug":"/getting-started","next":{"name":"Main Concepts","link":"/docs#concepts","ignoreNextPrev":null}}},"staticQueryHashes":["1291771538","300313841","4275213719"]}